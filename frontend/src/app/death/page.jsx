'use client';

import React, { useState, useEffect } from 'react';
import axios from 'axios';
import styles from './death.module.css';
import { Plus, Eye, Pencil, Trash } from 'lucide-react';
import AddDeathModal from './AddDeathModal';
import EditDeathModal from './EditDeathModal';
import ViewDeathModal from './ViewDeathModal'

export default function DeathInformationTable() {
  const [deaths, setDeaths] = useState([]);
  const [patientId, setPatientId] = useState('');
  const [error, setError] = useState('');
  const [showAddModal, setShowAddModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [showViewModal, setShowViewModal] = useState(false);
  const [selectedDeath, setSelectedDeath] = useState(null);

  const fetchDeaths = async () => {
    try {
      const res = await axios.get(`http://localhost:5000/api/deaths`);
      console.log('üì¶ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å backend:', res.data);
      setDeaths(res.data);
      setError('');
    } catch (err) {
      console.error('‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', err);
    }
  };

  const handleSearch = async () => {
    if (!patientId) return;
    try {
      const res = await axios.get(`http://localhost:5000/api/deaths/patient/${patientId}`);
      setDeaths(res.data);
      setError('');
    } catch (err) {
      setError('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ô‡∏µ‡πâ');
      setDeaths([]);
    }
  };

  const handleDelete = async (deathId) => {
    const confirmDelete = window.confirm('‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ?');
    if (!confirmDelete) return;

    try {
      await axios.delete(`http://localhost:5000/api/deaths/${deathId}`);
      alert('‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      fetchDeaths();
    } catch (err) {
      console.error('‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', err);
      alert('‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
    }
  };

  const handleEdit = (death) => {
    setSelectedDeath(death);
    setShowEditModal(true);
  };

  const handleView = (death) => {
  setSelectedDeath(death);
  setShowViewModal(true);
  };

  useEffect(() => {
    fetchDeaths();
  }, []);

  return (
    <div className={styles.container}>
      <div className={styles.headerRow}>
        <h2 className={styles.title}>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢</h2>
        <button className={styles.addButton} onClick={() => setShowAddModal(true)}>
          <Plus size={16} /> ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï
        </button>
      </div>

      <div className={styles.searchRow}>
        <input
          type="text"
          value={patientId}
          onChange={(e) => setPatientId(e.target.value)}
          className={styles.searchInput}
          placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"
        />
        <button onClick={handleSearch} className={styles.searchButton}>‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</button>
        <button onClick={fetchDeaths} className={styles.resetButton}>‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</button>
      </div>

      {error && <div className={styles.error}>{error}</div>}

      <table className={styles.table}>
        <thead>
          <tr>
            <th>‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï</th>
            <th>‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢</th>
            <th>‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</th>
            <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï</th>
            <th>‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏</th>
            <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
            <th>‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏®‡∏û</th>
            <th>‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
          </tr>
        </thead>
        <tbody>
          {deaths.map((d) => (
            <tr key={d.death_id}>
              <td>{d.death_id}</td>
              <td>{d.patients_id}</td>
              <td>{d.first_name} {d.last_name}</td>
              <td>{formatThaiDate(d.death_date)}</td>
              <td>{d.death_cause}</td>
              <td>{d.status}</td>
              <td>{d.management}</td>
              <td className={styles.actions}>
                <button onClick={() => handleView(d)} className={styles.iconButton}>
                  <Eye size={18} />
                </button>
                <button onClick={() => handleEdit(d)} className={styles.iconButton}>
                  <Pencil size={18} />
                </button>
                <button onClick={() => handleDelete(d.death_id)} className={styles.iconButton}>
                  <Trash size={18} />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {deaths.length === 0 && <div className={styles.noData}>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>}

      {showAddModal && (
        <AddDeathModal
          onClose={() => setShowAddModal(false)}
          onSave={fetchDeaths}
        />
      )}

      {showEditModal && selectedDeath && (
        <EditDeathModal
          deathData={selectedDeath}
          onClose={() => setShowEditModal(false)}
          onSave={fetchDeaths}
        />
      )}

      {showViewModal && selectedDeath && (
        <ViewDeathModal
          deathData={selectedDeath}
          onClose={() => setShowViewModal(false)}
        />
      )}
    </div>
  );
}

function formatDateTime(dateStr, timeStr) {
  if (!dateStr) return '-';
  const d = new Date(`${dateStr}T${timeStr || '00:00'}`);
  return d.toLocaleString('th-TH', {
    day: 'numeric',
    month: 'long',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
  });
}

function formatThaiDate(dateStr) {
  if (!dateStr) return '-';
  const d = new Date(dateStr);
  return d.toLocaleDateString('th-TH', {
    day: 'numeric',
    month: 'long',
    year: 'numeric',
  });
}
